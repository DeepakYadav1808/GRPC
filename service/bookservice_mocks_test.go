// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bookstore/bookstore_pb (interfaces: BookstoreServer)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	bookstore_pb "github.com/bookstore/bookstore_pb"
	gomock "github.com/golang/mock/gomock"
)

// MockBookstoreServer is a mock of BookstoreServer interface.
type MockBookstoreServer struct {
	ctrl     *gomock.Controller
	recorder *MockBookstoreServerMockRecorder
}

// MockBookstoreServerMockRecorder is the mock recorder for MockBookstoreServer.
type MockBookstoreServerMockRecorder struct {
	mock *MockBookstoreServer
}

// NewMockBookstoreServer creates a new mock instance.
func NewMockBookstoreServer(ctrl *gomock.Controller) *MockBookstoreServer {
	mock := &MockBookstoreServer{ctrl: ctrl}
	mock.recorder = &MockBookstoreServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookstoreServer) EXPECT() *MockBookstoreServerMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookstoreServer) CreateBook(arg0 context.Context, arg1 *bookstore_pb.BooksRequest) (*bookstore_pb.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(*bookstore_pb.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookstoreServerMockRecorder) CreateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookstoreServer)(nil).CreateBook), arg0, arg1)
}

// DeleteBook mocks base method.
func (m *MockBookstoreServer) DeleteBook(arg0 context.Context, arg1 *bookstore_pb.Id) (*bookstore_pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(*bookstore_pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookstoreServerMockRecorder) DeleteBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookstoreServer)(nil).DeleteBook), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockBookstoreServer) GetBook(arg0 context.Context, arg1 *bookstore_pb.Id) (*bookstore_pb.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0, arg1)
	ret0, _ := ret[0].(*bookstore_pb.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookstoreServerMockRecorder) GetBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookstoreServer)(nil).GetBook), arg0, arg1)
}

// GetBookdetails mocks base method.
func (m *MockBookstoreServer) GetBookdetails(arg0 bookstore_pb.Bookstore_GetBookdetailsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookdetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBookdetails indicates an expected call of GetBookdetails.
func (mr *MockBookstoreServerMockRecorder) GetBookdetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookdetails", reflect.TypeOf((*MockBookstoreServer)(nil).GetBookdetails), arg0)
}

// GetContent mocks base method.
func (m *MockBookstoreServer) GetContent(arg0 *bookstore_pb.PageRequest, arg1 bookstore_pb.Bookstore_GetContentServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockBookstoreServerMockRecorder) GetContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockBookstoreServer)(nil).GetContent), arg0, arg1)
}

// Upatebook mocks base method.
func (m *MockBookstoreServer) Upatebook(arg0 context.Context, arg1 *bookstore_pb.UpdateBookRequest) (*bookstore_pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upatebook", arg0, arg1)
	ret0, _ := ret[0].(*bookstore_pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upatebook indicates an expected call of Upatebook.
func (mr *MockBookstoreServerMockRecorder) Upatebook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upatebook", reflect.TypeOf((*MockBookstoreServer)(nil).Upatebook), arg0, arg1)
}

// mustEmbedUnimplementedBookstoreServer mocks base method.
func (m *MockBookstoreServer) mustEmbedUnimplementedBookstoreServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBookstoreServer")
}

// mustEmbedUnimplementedBookstoreServer indicates an expected call of mustEmbedUnimplementedBookstoreServer.
func (mr *MockBookstoreServerMockRecorder) mustEmbedUnimplementedBookstoreServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBookstoreServer", reflect.TypeOf((*MockBookstoreServer)(nil).mustEmbedUnimplementedBookstoreServer))
}
